ABOUT:

Lupin is a network MITM tool that automatically steals passwords from Chrome & Firefox password managers. Lupin is essentially a malicious proxy that injects hidden iframes onto client HTTP requests; each of the hidden iframes points to a vulnerable target website, the browser makes a network request and Lupin forges a response. The forged response contains a login form and some script. By predetermining the actual POST addresses for each of the target websites real logins, we can forge a login form that passes the browsers' security checks. If the user happens to have a password stored in her password manager for the iframe requested, Chrome and Firefox will automatically fill in the login form with the stored credentials. A script checks for the autofilled credentials and sends them back to the attacker; once a target website has been checked, the iframe reloads, now pointing to different target site. Lupin can iterate through well over a thousand of target sites in less than a minute and essentially bruteforce any vulnerable passwords stored in the password manager.

Only websites that expose login forms over HTTP are vulnerable, for example Facebook. That does not mean that all Facebook passwords are vulnerable. If a user saved her Facebook credentials from an HTTPS Facebook page, the password manager will not autofill them on an HTTP Facebook page; only passwords stored from an HTTP page are vulnerable.
	
Lupin only runs on Chrome/Firefox clients because these are the only two major browsers that automatically fill in login forms inside iframes without any user interaction.
	
INSTALL:
	*** Requires Python 2.5 or newer, along with the 'twisted' python module.
	* Unpack: tar zxvf Lupin-0.1.tar.gz
	* Install twisted:  sudo apt-get install python-twisted-web

RUN:

	1) allow machine to forward: 
	   echo "1" > /proc/sys/net/ipv4/ip_forward

	2) Setup iptables:
	   iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port <LupinPort>
	
	3) Run Lupin with optional arguments (See Below).
		
	4) Redirect traffic to your machine:
	   arpspoof -i <networkDevice> -t <targetAddress> <DefaultGatewayAddress>

OPTIONS:
	Run 'python Lupin.py -h' to get the command-line options.
	
    -l <port>, --listen=<port>
    
    -t <targets_file>, --targets=<targets_file>  
      
This is the list of target websites to check against. Each line in this file consists of the domain of the target and that domain's login form POST address as found on the real website's login form. Both addresses should be seperated by a "|" and only one target is allowed per line.
    
     -b <seconds>, --burst=<seconds>
    
Everytime the browser makes a request the refresh animations get triggered. If Lupin iterated through thousands of sites non-stop, the browsers refresh button would spin and reset for the entirety of the attack. Since it is not normal for a refresh animation to last more than a few seconds while a page is loading, Lupin limits the attack to bursts at a time. This option sets the approximate length of each attack burst. This is how long the refresh animation will spin and flicker while the burst is happening. The number of targets checked during this attack burst will depend on the victim's machine and on the network speed. However, on my tests Lupin iterated through about ~55 sites per second.
    
     -s <seconds>, --sleep=<seconds>

Since we limit the attack to bursts, we must sleep in between them. This option sets the number of seconds to wait between bursts. Many legitimate websites refresh periodically so having periodic refresh animations will not set off any alarms...However, a longer sleep time betweeen bursts would be more stealthy than a shorter one. If set to 0, the attack will run nonstop until all targets have been checked.
     
    -f, --focus 

Everytime the browser makes a request the status bar at the bottom of the screen shows the request being made. Since the status bar is relatively small and located at the bottom of the browser, and since the request only shows up for a few microseconds, it is highly unlikely a client will notice any single Lupin request as it flies by. However if hundreds or thousands of requests are being made in succesion, the status bar becomes a legitimate threat to Lupin's stealth. To mitigate this, Lupin will only run when the tab/window is out of focus. The status bar only shows requests for the tab in focus, so running only when out of focus helps keep Lupin stealthy. However, running only when the page is out of focus means that the attack may not run, if the page never loses focus. Setting this flag tells Lupin to run even if the page is in focus.

    -n --nibble

When websites first load, they tend to make a bunch of subsequent requests for stylesheets, scripts, media etc...It is normal for the refresh animations to persist for up to several seconds while a page loads completely. This, coupled with the fact that individual requests fly by the status bar very rapidly, means that it is most likely OK to run an attack burst when a page first loads (while it is in focus). Setting this flag causes Lupin to run a single burst of the attack when the page first loads and then sleeps until the page loses focus. This may be handy if a client does not browse with multiple tabs and never causes the main window to lose focus - under normal conditions, this would mean Lupin will never actually run since it normally waits to lose focus. If the bursts last too long, then all the previous logic does not hold since a long burst will not be amortized by the initial loading of the page.

    --bold

Bold mode dramatically increases the speed in which the attack runs and the number of target websites checked. This speed increase comes at the cost of stealth. See above explanations for more details. Clients of moderate savviness 	may/will know that something is wrong. Although they would have a  hard time figuring out what  exactly happened to them. If you don't care about alerting the victims and only care about getting as many credentials as possible as quickly as possible then Bold mode is for you.
