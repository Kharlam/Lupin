ABOUT:
	Lupin is a network MITM tool that automatically steals passwords from 
	Chrome & Firefox password managers. Lupin is essentially a malicious proxy 
	that injects hidden iframes onto client HTTP requests; each of the hidden 
	iframes points to a vulnerable target website, the browser makes a network 
	request and Lupin forges a response. The forged response contains a login 
	form and some script. By predetermining the actual POST addresses for each 
	of the target websites real logins, we can forge a login form that passes 
	the browsers' security checks. If the user happens to have a password stored 
	in her password manager for the iframe requested, Chrome and Firefox will 
	automatically fill in the login form with the stored credentials. A script
	checks for the autofilled credentials and sends them back to the attacker; 
	once a target website has been checked, the iframe reloads, now pointing to 
	different target site. Lupin can iterate through well over a thousand of 
	target sites in less than a minute and essentially bruteforce any vulnerable 
	passwords stored in the password manager.

	Only websites that expose login forms over HTTP are vulnerable, for example Facebook.
	That does not mean that all Facebook passwords are vulnerable. If a user saved her 
	Facebook credentials from an HTTPS Facebook page, the password manager will not	autofill 
	them on an HTTP Facebook page; only passwords stored from an HTTP page are vulnerable.
	
	Lupin only runs on Chrome/Firefox clients because these are the only two major browsers 
	that automatically fill in login forms inside iframes without any user interaction.
	
INSTALL:
	*** Requires Python 2.5 or newer, along with the 'twisted' python module.
	* Unpack: tar zxvf Lupin-0.1.tar.gz
	* Install twisted:  sudo apt-get install python-twisted-web

RUN:

	1) allow machine to forward: 
	   echo "1" > /proc/sys/net/ipv4/ip_forward

	2) Setup iptables:
	   iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port <LupinPort>
	
	3) Run Lupin with optional arguments (See Below).
		
	4) Redirect traffic to your machine:
	   arpspoof -i <networkDevice> -t <targetAddress> <DefaultGatewayAddress>

OPTIONS:
	Run 'python Lupin.py -h' to get the command-line options.
	
    -l <port>, --listen=<port>
    
    -t <targets_file>, --targets=<targets_file>  
      
    This is the list of target websites to check against. Each line in this file consists of the 
    domain of the target and that domain's login form POST address as found on the actual domain. 
    both addresses should be seperated by a "|" and only one target is allowed per line.

    -s <seconds>, --sleep=<seconds>

	 Everytime the browser makes a request the refresh animations get triggered. If Lupin iterated 
	 through thousands of sites non-stop, the browsers refresh button would spin and reset for the 
	 entirety of the attack. Since it is not normal for a refresh animation to last more than a few 
	 seconds while a page is loading, Lupin limits the attack to bursts at a time. this option sets 
	 the number of seconds to wait between bursts. Many legitimate websites refresh periodacally, 
	 so short bursts will not set off any alarms when the refresh animation gets triggered periodically.
	  If set to 0, the attack will runs nonstop until all targets have been checked.

    -f, --focus 

	 Everytime the browser makes a request the status bar shows the request being made. Since the 
	 status bar is relatively small and located at the bottom of the browser, and since the request
	 only shows up for a few microseconds, it is highly unlikely a client will notice any single 
	 Lupin request as it flies by. However if hundreds or thousands of requests are being made in succesion, the status bar becomes a legitimate threat to Lupin's stealth. To mitigate this, Lupin will
	 only run when the tab/window is out of focus. The status bar only shows requests for the tab in 
	 focus, so running only when out of focus helps keep Lupin stealthy

    -n --nibble

	 When websites first load, they make a bunch of subsequent requests for stylesheets, scripts, 
	 media etc...It is normal for the refresh animations to persist for up to several seconds 
	 while a page loads completely. This, coupled with the fact that individual requests fly by 
	 the status bar very rapidly, means that it is most likely OK to run an attack burst when a 
	 page first loads (while it is in focus). Setting this flag causes Lupin to check the first 25 
	 target sites on that targets list when the page first loads. This may be handy if a client does 
	 not browse with multiple tabs and never causes the main window to lose focus. Under normal 
	 conditions, this would mean Lupin will never run. If this flag is set, the top 25 targets 
	 in the list will get checked no matter.

    --bold

	Bold mode will dramatically increases the speed in which the attack runs, and the number of 
	target websites checked this speed increase comes at the cost of stealth. See above explanations 
	for more details. Clients of moderate savviness 	may/will know that something is wrong...
	If you don't care about that and only care about getting as many credentials as possible as 
	quickly as possible then Bold mode is for you.
	
    

